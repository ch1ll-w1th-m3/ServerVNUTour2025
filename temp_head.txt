"""
Slash commands for the bot
"""
import discord
from discord import app_commands
from discord.ext import commands
from ..music.player import get_player, ensure_voice, after_play_callback, force_cleanup_ffmpeg_source
from ..music.ytdlp_handler import ytdlp_extract, build_ffmpeg_options
import asyncio
import threading


class VolumeControlledAudioSource(discord.FFmpegPCMAudio):
    """Custom audio source with volume control"""
    
    def __init__(self, source, volume=1.0, **kwargs):
        super().__init__(source, **kwargs)
        self._volume = volume
    
    @property
    def volume(self):
        return self._volume
    
    @volume.setter
    def volume(self, value):
        self._volume = max(0.0, min(2.0, value))
    
    def read(self):
        """Read audio data with volume applied"""
        data = super().read()
        if data and self._volume != 1.0:
            # Apply volume by scaling the audio data
            import array
            audio_array = array.array('h', data)
            for i in range(len(audio_array)):
                audio_array[i] = int(audio_array[i] * self._volume)
            data = audio_array.tobytes()
        return data


def setup_slash_commands(bot):
    """Setup all slash commands"""
    
    # Music Commands Group
    @bot.tree.command(name="play", description="Ph√°t nh·∫°c t·ª´ YouTube")
    @app_commands.describe(query="T√™n b√†i h√°t ho·∫∑c URL YouTube")
    async def play_slash(interaction: discord.Interaction, query: str):
        """Ph√°t nh·∫°c t·ª´ YouTube"""
        try:
            # Defer the response since this might take a while
            await interaction.response.defer()
            
            # Create a mock context for compatibility with existing functions
            class MockContext:
                def __init__(self, interaction):
                    self.guild = interaction.guild
                    self.channel = interaction.channel
                    self.author = interaction.user
                    self.message = interaction
                    
                async def send(self, content=None, embed=None):
                    if interaction.response.is_done():
                        return await interaction.followup.send(content=content, embed=embed)
                    else:
                        return await interaction.response.send_message(content=content, embed=embed)
            
            ctx = MockContext(interaction)
            
            # Ensure bot is in voice channel
            vc = await ensure_voice(ctx.message)
            
            # Get or create player
            player = get_player(ctx.guild.id)
            player.text_channel_id = ctx.channel.id
            
            # Show searching message
            await interaction.followup.send(f"üîç **ƒêang t√¨m ki·∫øm:** {query}")
            
            try:
                # Extract track info
                track = await ytdlp_extract(query, ctx.author.id)
                
                # Add to queue
                player.add_track(track)
                
                # Update message
                await interaction.followup.send(f"‚úÖ **ƒê√£ th√™m v√†o queue:** {track.title}")
                
                # Start playing if not already playing
                if not vc.is_playing():
                    asyncio.create_task(play_next(ctx.guild, vc, player))
                    
            except Exception as e:
                await interaction.followup.send(f"‚ùå **L·ªói:** {str(e)}")
                
        except Exception as e:
            if not interaction.response.is_done():
                await interaction.response.send_message(f"‚ùå **L·ªói:** {str(e)}")
            else:
                await interaction.followup.send(f"‚ùå **L·ªói:** {str(e)}")
    
    @bot.tree.command(name="skip", description="B·ªè qua b√†i h√°t hi·ªán t·∫°i")
    async def skip_slash(interaction: discord.Interaction):
        """B·ªè qua b√†i h√°t hi·ªán t·∫°i"""
        try:
            vc = interaction.guild.voice_client
            if not vc or not vc.is_connected():
                await interaction.response.send_message("‚ùå Bot kh√¥ng ·ªü trong voice channel")
                return
            
            if vc.is_playing():
                # Stop current track and trigger next
                vc.stop()
                await interaction.response.send_message("‚è≠Ô∏è **ƒê√£ b·ªè qua b√†i h√°t hi·ªán t·∫°i**")
                
                # Get player and play next track
                player = get_player(interaction.guild.id)
                if player.queue:
                    await interaction.followup.send("üîÑ **ƒêang chuy·ªÉn sang b√†i ti·∫øp theo...**")
                    asyncio.create_task(play_next(interaction.guild, vc, player))
                else:
                    await interaction.followup.send("üì≠ **Queue ƒë√£ h·∫øt, kh√¥ng c√≤n b√†i n√†o ƒë·ªÉ ph√°t**")
            else:
                await interaction.response.send_message("‚ùå Kh√¥ng c√≥ g√¨ ƒëang ph√°t")
                
        except Exception as e:
            await interaction.response.send_message(f"‚ùå **L·ªói:** {str(e)}")
    
    @bot.tree.command(name="queue", description="Hi·ªÉn th·ªã queue nh·∫°c")
    async def queue_slash(interaction: discord.Interaction):
        """Hi·ªÉn th·ªã queue nh·∫°c"""
        try:
            player = get_player(interaction.guild.id)
            queue_info = player.get_queue_info()
            
            if player.now_playing:
                now_playing = f"üéµ **ƒêang ph√°t:** {player.now_playing.title}\n\n"
            else:
                now_playing = ""
            
            await interaction.response.send_message(f"{now_playing}{queue_info}")
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå **L·ªói:** {str(e)}")
    
    @bot.tree.command(name="stop", description="D·ª´ng ph√°t nh·∫°c v√† r·ªùi voice channel")
    async def stop_slash(interaction: discord.Interaction):
        """D·ª´ng ph√°t nh·∫°c v√† r·ªùi voice channel"""
        try:
            vc = interaction.guild.voice_client
            if not vc or not vc.is_connected():
                await interaction.response.send_message("‚ùå Bot kh√¥ng ·ªü trong voice channel")
                return
            
            # Clear queue and stop
            player = get_player(interaction.guild.id)
            player.clear_queue()
            player.skip_current()
            
            # Disconnect
            await vc.disconnect()
            await interaction.response.send_message("‚èπÔ∏è **ƒê√£ d·ª´ng ph√°t nh·∫°c v√† r·ªùi voice channel**")
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå **L·ªói:** {str(e)}")
    
    @bot.tree.command(name="volume", description="ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng (0-200%)")
    @app_commands.describe(level="M·ª©c √¢m l∆∞·ª£ng t·ª´ 0 ƒë·∫øn 200 (%)")
    async def volume_slash(interaction: discord.Interaction, level: int):
        """ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng (0-200%)"""
        try:
            if not 0 <= level <= 200:
                await interaction.response.send_message("‚ùå √Çm l∆∞·ª£ng ph·∫£i t·ª´ 0% ƒë·∫øn 200%")
                return
            
            player = get_player(interaction.guild.id)
            # Convert percentage to decimal (0-2.0)
            volume_decimal = level / 100.0
            player.set_volume(volume_decimal)
            
            # Apply volume to currently playing audio if any
            vc = interaction.guild.voice_client
            if vc and vc.is_playing() and player.now_playing:
                # Use our custom volume control
                if hasattr(vc.source, 'volume'):
                    vc.source.volume = volume_decimal
                    await interaction.response.send_message(f"üîä **√Çm l∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh:** {level}% (√°p d·ª•ng ngay l·∫≠p t·ª©c)")
                else:
                    # Fallback to FFmpeg method if source doesn't support volume
                    await apply_volume_from_current_position(vc, player, volume_decimal)
                    await interaction.response.send_message(f"üîä **√Çm l∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh:** {level}% (ƒëang √°p d·ª•ng...)")
            else:
                await interaction.response.send_message(f"üîä **√Çm l∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh:** {level}%")
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå **L·ªói:** {str(e)}")
    
    # Admin Commands
    @bot.tree.command(name="ping", description="Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot")
    async def ping_slash(interaction: discord.Interaction):
        """Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot"""
        latency = round(bot.latency * 1000)
        await interaction.response.send_message(f"üèì **Pong!** ƒê·ªô tr·ªÖ: {latency}ms")
    
    @bot.tree.command(name="info", description="Th√¥ng tin v·ªÅ bot")
    async def info_slash(interaction: discord.Interaction):
        """Th√¥ng tin v·ªÅ bot"""
        embed = discord.Embed(
            title="ü§ñ **VnuTourBot**",
            description="Bot qu·∫£n l√Ω tour VNU v·ªõi ch·ª©c nƒÉng √¢m nh·∫°c",
            color=0x00ff00
        )
        
        embed.add_field(
            name="üìä **Th·ªëng k√™**",
            value=f"Servers: {len(bot.guilds)}\nUsers: {len(bot.users)}",
            inline=True
        )
        
        embed.add_field(
            name="üèì **ƒê·ªô tr·ªÖ**",
            value=f"{round(bot.latency * 1000)}ms",
            inline=True
        )
        
        embed.add_field(
            name="üêç **Phi√™n b·∫£n**",
            value=f"discord.py {discord.__version__}",
            inline=True
        )
        
        embed.set_footer(text="VnuTourBot v1.0")
        await interaction.response.send_message(embed=embed)
    
    @bot.tree.command(name="clear", description="X√≥a tin nh·∫Øn (ch·ªâ admin)")
    @app_commands.describe(amount="S·ªë l∆∞·ª£ng tin nh·∫Øn c·∫ßn x√≥a")
    @app_commands.default_permissions(manage_messages=True)
    async def clear_slash(interaction: discord.Interaction, amount: int):
        """X√≥a tin nh·∫Øn (ch·ªâ admin)"""
        try:
            if amount < 1 or amount > 100:
                await interaction.response.send_message("‚ùå S·ªë l∆∞·ª£ng tin nh·∫Øn ph·∫£i t·ª´ 1 ƒë·∫øn 100")
                return
            
            # Defer response since this might take a while
            await interaction.response.defer(ephemeral=True)
            
            deleted = await interaction.channel.purge(limit=amount)
            await interaction.followup.send(f"üóëÔ∏è **ƒê√£ x√≥a {len(deleted)} tin nh·∫Øn**", ephemeral=True)
            
